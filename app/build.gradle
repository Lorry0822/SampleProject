import com.wj.build.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    // 编译 SDK 版本
    compileSdkVersion AppConfigs.compile_sdk_version
    // 编译工具版本
    buildToolsVersion AppConfigs.build_tools_version

    // 资源前缀
    resourcePrefix "app"

    defaultConfig {
        // 应用 id
        applicationId AppConfigs.application_id

        // 最低支持版本
        minSdkVersion AppConfigs.min_sdk_version
        // 目标 SDK 版本
        targetSdkVersion AppConfigs.target_sdk_version

        // 应用版本号
        versionCode AppConfigs.version_code
        // 应用版本名
        versionName AppConfigs.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 开启 Dex 分包
        multiDexEnabled true
    }

    signingConfigs {
        // 签名配置
        release {
            keyAlias SigningConfigs.key_alias
            keyPassword SigningConfigs.key_password
            storeFile file(SigningConfigs.store_file)
            storePassword SigningConfigs.store_password
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debug {
            keyAlias SigningConfigs.key_alias
            keyPassword SigningConfigs.key_password
            storeFile file(SigningConfigs.store_file)
            storePassword SigningConfigs.store_password
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            // 开启混淆
            minifyEnabled true
            // 开启Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件，此项只有在开启混淆时才生效
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    // 维度
    flavorDimensions "version"

    productFlavors {
        // 正式线上版本
        online {
            dimension 'version'
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "true"
        }

        // 测试版本
        offline {
            dimension 'version'
            // 应用包名后缀
            applicationIdSuffix ".offline"
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "false"
        }

        // 开发版本
        dev {
            dimension 'version'
            // 应用包名后缀
            applicationIdSuffix ".dev"
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "false"
        }
    }

    // 源文件路径设置
    sourceSets {
        main { //           Java             Kotlin
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
            jniLibs.srcDirs = ['libs', 'jniLibs']
        }
    }

    // dex 配置
    dexOptions {
        jumboMode true
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
        maxProcessCount 6
        keepRuntimeAnnotatedClasses false
    }

    buildFeatures {
        // DataBinding 开启
        dataBinding = true
    }

    lintOptions {
        // 出现错误不终止编译
        abortOnError false
    }

    // 使用 httpclient
    useLibrary 'org.apache.http.legacy'

    // 配置 APK 输出路径
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "sample_${variant.flavorName}_${variant.buildType.name}_v${versionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    // 测试
    testImplementation Dependencies.test_junit
    androidTestImplementation Dependencies.androidx_test_runner
    androidTestImplementation Dependencies.androidx_test_espresso_core
    androidTestImplementation Dependencies.androidx_test_ext_junit

    // Kotlin jdk
    implementation Dependencies.kotlin_jdk

    // v4
    implementation Dependencies.androidx_legacy
    // v7
    implementation Dependencies.androidx_appcompat
    // design
    implementation Dependencies.androidx_material
    // RecyclerView
    implementation Dependencies.androidx_recyclerview
    // 约束性布局
    implementation Dependencies.androidx_constraint

    // activity
    implementation Dependencies.androidx_activity_ktx
    // fragment
    implementation Dependencies.androidx_fragment_ktx

    // ktx
    implementation Dependencies.androidx_core_ktx

    // LifeCycle 拓展
    implementation Dependencies.androidx_lifecycle_ktx
    implementation Dependencies.androidx_lifecycle_extensions
    // ViewModel 拓展
    implementation Dependencies.androidx_lifecycle_viewmodel_ktx
    // LiveData 拓展
    implementation Dependencies.androidx_lifecycle_livedata_ktx

    // 协程
    implementation Dependencies.kotlin_coroutines

    // viewpager2
    implementation Dependencies.androidx_viewpager2

    // Logger
    implementation Dependencies.logger

    // Koin
    implementation Dependencies.koin_scope
    implementation Dependencies.koin_viewmodel
    implementation Dependencies.koin_ext

    // LiveEventBus
    implementation Dependencies.live_event_bus

    // OkHttp
    implementation Dependencies.okhttp

    // Retrofit
    implementation Dependencies.retrofit
    implementation Dependencies.retrofit_gson

    // Glide
    implementation Dependencies.glide

    // MMKV 数据存储
    implementation Dependencies.tencent_mmkv

    // SmartRefreshLayout
    implementation Dependencies.smart_refresh
    implementation Dependencies.smart_refresh_header_classics
    implementation Dependencies.smart_refresh_footer_classics

    // 状态栏工具
    implementation Dependencies.immersion_bar
    implementation Dependencies.immersion_bar_ktx

    // Tablayout
    implementation Dependencies.tablayout

    // 依赖 base 库
    implementation project(":lib_ui")
    implementation project(":lib_databinding_adapter")
    implementation project(':lib_okhttp_interceptor')
    implementation project(":lib_recyclerview")
    implementation project(":lib_views_custom")
    implementation project(":lib_swipe_back")
}
