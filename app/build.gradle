apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    // 编译 SDK 版本
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    // 编译工具版本
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    // 资源前缀
    resourcePrefix "app"

    defaultConfig {
        // 应用 id
        applicationId "com.wj.sampleproject"

        // 最低支持版本
        minSdkVersion rootProject.ext.android.minSdkVersion
        // 目标 SDK 版本
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        // 应用版本号
        versionCode rootProject.ext.android.versionCode
        // 应用版本名
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 开启 Dex 分包
        multiDexEnabled true

//        ndk {
//            // 支持的 cpu 类型
//            abiFilters 'armeabi', 'armeabi-v7a'
//        }
    }

    signingConfigs {
        // 签名配置
        release {
            keyAlias 'test'
            keyPassword '123123'
            storeFile file('android_test.jks')
            storePassword '123123'
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debug {
            keyAlias 'test'
            keyPassword '123123'
            storeFile file('android_test.jks')
            storePassword '123123'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            // 开启混淆
            minifyEnabled true
            // 开启Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件，此项只有在开启混淆时才生效
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    // 维度
    flavorDimensions "version"

    productFlavors {
        // 正式线上版本
        online {
            dimension 'version'
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "true"
        }

        // 测试版本
        offline {
            dimension 'version'
            // 应用包名后缀
            applicationIdSuffix ".offline"
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "false"
        }

        // 开发版本
        dev {
            dimension 'version'
            // 应用包名后缀
            applicationIdSuffix ".dev"
            // 是否使用线上环境
            buildConfigField "boolean", "IS_ONLINE_ENV", "false"
        }
    }

    // 源文件路径设置
    sourceSets {
        main { //           Java             Kotlin
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
            jniLibs.srcDirs = ['libs', 'jniLibs']
        }
    }

    // dex 配置
    dexOptions {
        jumboMode true
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
        maxProcessCount 6
        keepRuntimeAnnotatedClasses false
    }

    dataBinding {
        // DataBinding 开启
        enabled true
    }

    lintOptions {
        // 出现错误不终止编译
        abortOnError false
    }

    // 使用 httpclient
    useLibrary 'org.apache.http.legacy'

    // 配置 APK 输出路径
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "sample_${variant.flavorName}_${variant.buildType.name}_v${versionName}.apk"
        }
    }
}

dependencies {
    // 测试
    testImplementation rootProject.ext.dependencies["test_junit"]
    androidTestImplementation rootProject.ext.dependencies["androidx_test_runner"]
    androidTestImplementation rootProject.ext.dependencies["androidx_test_espresso-core"]
    androidTestImplementation rootProject.ext.dependencies["androidx_test_ext_junit"]

    // .jar .aar 包
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    // Kotlin jdk
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // ktx
    implementation rootProject.ext.dependencies["androidx_core-ktx"]
    // v4
    implementation rootProject.ext.dependencies["androidx_support-v4"]
    // v7
    implementation rootProject.ext.dependencies["androidx_appcompat-v7"]
    // design
    implementation rootProject.ext.dependencies["androidx_design"]
    // RecyclerView
    implementation rootProject.ext.dependencies["androidx_recyclerview"]
    // 约束性布局
    implementation rootProject.ext.dependencies["androidx_constraint"]

    // ViewModel Kotlin 扩展
    implementation rootProject.ext.dependencies["androidx_viewmodel-ktx"]

    // 协程
    implementation rootProject.ext.dependencies["kotlinx_coroutines"]

    // Koin
    implementation rootProject.ext.dependencies["koin"]
    implementation rootProject.ext.dependencies["koin-scope"]
    implementation rootProject.ext.dependencies["koin-viewmodel"]
    testImplementation rootProject.ext.dependencies["koin-test"]

    // OkHttp
    implementation rootProject.ext.dependencies["okhttp"]

    // Retrofit
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-gson"]

    // Glide
    implementation rootProject.ext.dependencies["glide"]

    // SmartRefreshLayout
    implementation rootProject.ext.dependencies["smartrefresh"]

    // 依赖 base 库
    implementation project(":lib_base")
    implementation project(":lib_databinding_adapter")
    implementation project(":lib_logger")
    implementation project(':lib_okhttp_interceptor')
    implementation project(":lib_recyclerview")
    implementation project(":lib_views_custom")
}
